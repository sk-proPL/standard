name: Build with tests

on:
  push: ~
  pull_request: ~
  workflow_dispatch: ~

jobs:
  tests:
    runs-on: ubuntu-latest

    name: "PHP ${{ matrix.php }}, Symfony ${{ matrix.symfony }}, MySQL ${{ matrix.mysql }} "

    strategy:
      fail-fast: false
      matrix:
        php: [ "8.2", "8.3", "8.4" ]
        symfony: [ "^7.2" ]
        node:  "20.x", "22.x" ]
        mysql: [ "5.7", "8.0" ]

    env:
      APP_ENV: test
      DATABASE_URL: "mysql://root:root@127.0.0.1/app?serverVersion=${{ matrix.mysql }}"

    steps:
      -
        uses: actions/checkout@v3

      -
        name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "${{ matrix.php }}"
          extensions: intl
          tools: flex,symfony
          coverage: none
      -
        name: Setup Node
        uses: actions/setup-node@v4
        with:
            node-version: "${{ matrix.node }}"
      -
        name: Shutdown default MySQL
        run: sudo service mysql stop

      -
        name: Setup MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql version: "${{ matrix.mysql }}"
          mysql root password: "root"

      -
        name: Install certificates
        run: symfony server:ca:install

      -
        name: Run webserver
        run: symfony server:start --daemon

      -
        name: Get Composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      -
        name: Cache Composer
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.json **/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php }}-composer-

      -
        name: Restrict Symfony version
        if: matrix.symfony != ''
        run: |
          composer config extra.symfony.require "${{ matrix.symfony }}"

      -
        name: Install PHP dependencies
        run: composer install --no-interaction
        env:
          SYMFONY_REQUIRE: ${{ matrix.symfony }}
      -
        name: Get Yarn cache directory
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      -
        name: Cache Yarn
        uses: actions/cache@v4
        with:
            path: ${{ steps.yarn-cache.outputs.dir }}
            key: ${{ runner.os }}-node-${{ matrix.node }}-yarn-${{ hashFiles('**/package.json **/yarn.lock') }}
            restore-keys: |
                ${{ runner.os }}-node-${{ matrix.node }}-yarn-
      -
        name: Install JS dependencies
        run: yarn install

      -
        name: Prepare database
        run: |
          bin/console doctrine:database:create -vvv
          bin/console doctrine:schema:create -vvv

      -
        name: Prepare test application assets
        run: |
            bin/console assets:install public -vvv
            yarn encore dev

      -
        name: Prepare cache
        run: bin/console cache:warmup -vvv

      -
        name: Load fixtures
        run: bin/console doctrine:fixtures:load -n

      -
        name: Validate composer.json
        run: composer validate --ansi --strict

      -
        name: Validate database schema
        run: bin/console doctrine:schema:validate

      -
        name: Run PHPUnit
        run: vendor/bin/phpunit --colors=always